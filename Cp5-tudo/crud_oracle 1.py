# -*- coding: utf-8 -*-
"""CRUD_ORACLE.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EzbJTAaR2MB9V3SpxxnZHSbKVg_UIzFU
"""

oracle_conn.json

#!pip install oracledb

def digita_inteiro(texto):
  while True:
    try:
      inteiro = int(input(texto).strip())
      return inteiro
    except ValueError:
      print("Entrada inválida. Por favor, digite um número inteiro.")

import json
import pandas as pd
import oracledb
from pathlib import Path
import os

#=========Conexão=========

def start_conn():
    try:
        DATA_FILE = "oracle_conn.json"
        file = open(DATA_FILE, 'r')
        xfile = json.load(file)

        connection = oracledb.connect(
            user=xfile[0]["user"],
            password=xfile[0]["password"],
            dsn=xfile[0]["dsn"]
        )

        cursor = connection.cursor()
        print("Conexão bem-sucedida!")
        return connection, cursor

    except FileNotFoundError:
        print('Arquivo não encontrado. Verifique o caminho.')
        return None, None

    except json.JSONDecodeError:
        print('Erro ao decodificar o arquivo JSON. Verifique a sintaxe.')
        return None, None

    except KeyError as e:
        print(f'Chave ausente no JSON: {e}')
        return None, None

    except oracledb.DatabaseError as e:
        error, = e.args
        print("Erro de banco de dados:", error.message)
        return None, None

    except Exception as e:
        print("Erro inesperado:", e)
        return None, None

connection, cursor = start_conn()

#=======Criação de tabela ou inserção de dados=======

def insert_record():

    nome = input("Digite o nome: ").strip()
    sobrenome = input("Digite o sobrenome: ").strip()
    telefone = digita_inteiro("Digite o telefone: ")

    try:
        # Verifica se a tabela "AGENDA" já existe
        check_table_query = """
        SELECT table_name FROM user_tables WHERE table_name = 'AGENDA'
        """
        cursor.execute(check_table_query)
        result = cursor.fetchone()

        if result:
            print("A tabela 'AGENDA' já existe.")
        else:
            # Criação da tabela
            create_table_query = '''
            CREATE TABLE AGENDA (
                id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                nome VARCHAR2(50),
                sobrenome VARCHAR2(50),
                telefone VARCHAR2(50)
            )
            '''
            cursor.execute(create_table_query)
            print("Tabela 'AGENDA' criada com sucesso.")

    except oracledb.DatabaseError as e:
        error, = e.args
        print("Erro de banco de dados:", error.message)

    except Exception as e:
        print("Erro inesperado:", e)

    cursor.close()
    connection.close()


    try:
        # Inserção de um novo registro
        insert_query = '''
        INSERT INTO AGENDA (nome, sobrenome, telefone)
        VALUES (:nome, :sobrenome, :telefone)
        '''

        cursor.execute(insert_query, nome=nome, sobrenome=sobrenome, telefone=telefone)
        connection.commit()
        print("Registro inserido com sucesso!")

    except oracledb.DatabaseError as e:
        error, = e.args
        print("Erro de banco de dados:", error.message)

    except Exception as e:
        print("Erro inesperado:", e)

insert_record()

def list_records():
    try:
        cursor.execute("SELECT * FROM AGENDA")

        # Buscando e imprimindo todas as tabelas
        agenda_records = cursor.fetchall()

    except oracledb.DatabaseError as e:
        error, = e.args
        print("Erro de banco de dados:", error.message)

    except Exception as e:
        print("Erro inesperado:", e)

    print("Lista de registros:\n")
    print(f"{'Nome':<10} {'Sobrenome':<20} - Telefone")
    for registro in agenda_records:
        print(f"{registro[1]:<10} {registro[2]:<20} - {registro[3]:<15}")

list_records()

def search_ID(ID_busca):
    encontrado = False
    agenda_records = []

    try:
        query = f'''SELECT * FROM AGENDA WHERE id = '{ID_busca}' '''

        cursor.execute(query)

        # Buscando e imprimindo todas as tabelas
        agenda_records = cursor.fetchall()

    except oracledb.DatabaseError as e:
        error, = e.args
        print("Erro de banco de dados:", error.message)

    except Exception as e:
        print("Erro inesperado:", e)

    for linha in agenda_records:
        if linha[1].strip().lower() == ID_busca.strip().lower():
            print(f"{'Nome':<10} {'Sobrenome':<20} - Telefone")
            print(f"{linha[1]:<10} {linha[2]:<20} - {linha[3]:<15}")
            encontrado = True

    if not encontrado:
        print("Nenhum registro encontrado com esse nome.")

search_ID("Luiz")

def delete_record(ID_remover):

    print(f"Registros com nome '{ID_remover}' removidos com sucesso.")

delete_record("Alberto")

def update_record(ID_busca):
    atualizados = 0

    print(f"\n{atualizados} registro(s) atualizado(s).")
    return atualizados

update_record("Jorge")

def menu():
    print("\n=== Lista Telefônica ===")
    print("1) Criar registro")
    print("2) Listar registros")
    print("3) Atualizar registro (por id)")
    print("4) Buscar registro (por id)")
    print("5) Remover registro (por id)")
    print("0) Sair")

if __name__ == "__main__":
    start_conn()

    while True:
        menu()
        opcao = input("Escolha uma opção: ").strip()

        if opcao == "1":
            insert_record()

        elif opcao == "2":
            print("\n")
            list_records()

        elif opcao == "3":
            id = input("Id a atualizar: ").strip()
            if id:
                update_record(id)
                #atualizar para id
                print("\n")
                list_records()
                
            else:
                print("Informe um id válido.")

        elif opcao == "4":
            id = input("Id para busca: ").strip()
            if id:
                print("\n")
                search_ID(id)
                #atualizar para id
            else:
                print("Informe um Id válido.")

        elif opcao == "5":
            id = input("Id para remover: ").strip()
            if id:
                print("\n")
                delete_record(id)

                print("\n")
                list_records()
                
            else:
                print("Informe um id válido.")

        elif opcao == "0":
            print("Saindo.")
            break

        else:
            print("Opção inválida. Tente novamente.")



"""# **Exemplo de funcao para digitacao**"""

def digita_inteiro(texto):
  while True:
    try:
      inteiro = int(input(texto).strip())
      return inteiro
    except ValueError:
      print("Entrada inválida. Por favor, digite um número inteiro.")

telefone = digita_inteiro("Digite o telefone: ")

telefone





