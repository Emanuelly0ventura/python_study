# -*- coding: utf-8 -*-
"""CRUD_ORACLE.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EzbJTAaR2MB9V3SpxxnZHSbKVg_UIzFU
"""

import json
import os
from pathlib import Path

os.chdir('/content')
diretorio = os.getcwd()
print(diretorio)

BASE = Path(diretorio)
ARQ = BASE / 'lista_telefonica.json'
print(BASE)
print(ARQ)

def digita_inteiro(texto):
  while True:
    try:
      inteiro = int(input(texto).strip())
      return inteiro
    except ValueError:
      print("Entrada inválida. Por favor, digite um número inteiro.")

def inicializar_arquivo():
    if not os.path.exists(ARQ):
        try:
            with open(ARQ, 'r', encoding='utf-8') as f:
                escritor = json.load(f)
        except FileNotFoundError:
            print('Arquivo não encontrado. Verifique o caminho.')

def criar_registro():

    #
    # MUDAR INPUT USANDO TRY
    #

    nome = input("Digite o nome: ").strip()
    sobrenome = input("Digite o sobrenome: ").strip()
    telefone = digita_inteiro("Digite o telefone: ")

    #
    #  VERIFICAR CONSISTÊNCIA DOS DADOS
    #

    try:
      with open(ARQ, 'r', encoding='utf-8') as f:
        escritor = json.load(f)
    except FileNotFoundError:
      print('Arquivo não encontrado. Verifique o caminho.')

    novo = {"nome": nome, "sobrenome": sobrenome, "telefone": telefone}
    escritor.append(novo)

    # COLOCAR TRY

    with open(ARQ, 'w', encoding='utf-8') as f:
        #json.dump(escritor, f, indent=2, ensure_ascii=False)
        json.dump(escritor, f, separators=(',', ':'), ensure_ascii=False)

    print("Registro adicionado com sucesso.")

criar_registro()

def listar_registros():
    try:
      with open(ARQ, 'r', encoding='utf-8') as f:
        escritor = json.load(f)
    except FileNotFoundError:
      print('Arquivo não encontrado. Verifique o caminho.')

    print("Lista de registros:\n")
    print(f"{'Nome':<10} {'Sobrenome':<20} -        Telefone")
    for registro in escritor:
        print(f"{registro['nome']:<10} {registro['sobrenome']:<20} - {registro['telefone']:15.0f}")

listar_registros()

def buscar_registro(nome_busca):
    encontrado = False

    # COLOCAR TRY

    with open(ARQ, 'r', encoding='utf-8') as f:
        leitor = json.load(f)

        for linha in leitor:
            if linha["nome"].strip().lower() == nome_busca.strip().lower():
                print(f"{'Nome':<10} {'Sobrenome':<20} -        Telefone")
                print(f"{linha['nome']:<10} {linha['sobrenome']:<20} - {linha['telefone']:15.0f}")
                encontrado = True
    if not encontrado:
        print("Nenhum registro encontrado com esse nome.")

buscar_registro("  luIz   ")

def remover_registro(nome_remover):
    # COLOCAR TRY

    with open(ARQ, 'r', encoding='utf-8') as f:
        leitor = json.load(f)

    novos_registros = [linha for linha in leitor if linha["nome"].strip().lower() != nome_remover.strip().lower()]

    # COLOCAR TRY

    with open(ARQ, 'w', encoding='utf-8') as f:
        json.dump(novos_registros, f, indent=2, ensure_ascii=False)

    print(f"Registros com nome '{nome_remover}' removidos com sucesso.")

remover_registro("Alberto")

def atualizar_registro(nome_busca):
    # COLOCAR TRY

    with open(ARQ, 'r', encoding='utf-8') as f:
        leitor = json.load(f)

    if not leitor:
        print("Nenhum registro para atualizar.")
        return 0

    atualizados = 0
    for linha in leitor:
        if linha["nome"].strip().lower() == nome_busca.strip().lower():
            print(f"\nRegistro atual: {linha['nome']} {linha['sobrenome']} - {linha['telefone']}")
            novo_nome = input("Novo nome (Enter para manter): ").strip()
            novo_sobrenome = input("Novo sobrenome (Enter para manter): ").strip()
            novo_telefone = input("Novo Telefone (Enter para manter): ").strip()

            if novo_nome:
                linha["nome"] = novo_nome

            if novo_sobrenome:
                linha["sobrenome"] = novo_sobrenome

            if novo_telefone:
                linha["telefone"] = int(novo_telefone)

            atualizados += 1

    # Regrava arquivo apenas se houve mudanças
    if atualizados > 0:
        # COLOCAR TRY

        with open(ARQ, 'w', encoding='utf-8') as f:
            json.dump(leitor, f, indent=2, ensure_ascii=False)

    print(f"\n{atualizados} registro(s) atualizado(s).")
    return atualizados

atualizar_registro("Jorge")

def menu():
    print("\n=== Lista Telefônica ===")
    print("1) Criar registro")
    print("2) Listar registros")
    print("3) Atualizar registro (por nome)")
    print("4) Buscar registro (por nome)")
    print("5) Remover registro (por nome)")
    print("0) Sair")

if __name__ == "__main__":
    inicializar_arquivo()

    while True:
        menu()
        opcao = input("Escolha uma opção: ").strip()

        if opcao == "1":
            criar_registro()

        elif opcao == "2":
            print("\n")
            listar_registros()

        elif opcao == "3":
            nome = input("Nome a atualizar: ").strip()
            if nome:
                atualizar_registro(nome)
                print("\n")
                listar_registros()
            else:
                print("Informe um nome válido.")

        elif opcao == "4":
            nome = input("Nome para busca: ").strip()
            if nome:
                print("\n")
                buscar_registro(nome)
            else:
                print("Informe um nome válido.")

        elif opcao == "5":
            nome = input("Nome para remover: ").strip()
            if nome:
                print("\n")
                remover_registro(nome)
                print("\n")
                listar_registros()
            else:
                print("Informe um nome válido.")

        elif opcao == "0":
            print("Saindo.")
            break

        else:
            print("Opção inválida. Tente novamente.")



"""# **Exemplo de funcao para digitacao**"""

def digita_inteiro(texto):
  while True:
    try:
      inteiro = int(input(texto).strip())
      return inteiro
    except ValueError:
      print("Entrada inválida. Por favor, digite um número inteiro.")

telefone = digita_inteiro("Digite o telefone: ")

telefone





